//
//  QueryService用のParam型とResult型を定義したprotoファイル
//

// ライセンスヘッダ:バージョン3を利用

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: go_proto/query.proto

// パッケージの宣言

package go_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StoreCategoryQuery_List_FullMethodName = "/go_protoc.StoreCategoryQuery/List"
	StoreCategoryQuery_ById_FullMethodName = "/go_protoc.StoreCategoryQuery/ById"
)

// StoreCategoryQueryClient is the client API for StoreCategoryQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreCategoryQueryClient interface {
	// すべてのカテゴリを取得して返す
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StoreCategoriesResult, error)
	// 指定されたIDのカテゴリを取得して返す
	ById(ctx context.Context, in *StoreCategoryParam, opts ...grpc.CallOption) (*StoreCategoryResult, error)
}

type storeCategoryQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreCategoryQueryClient(cc grpc.ClientConnInterface) StoreCategoryQueryClient {
	return &storeCategoryQueryClient{cc}
}

func (c *storeCategoryQueryClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StoreCategoriesResult, error) {
	out := new(StoreCategoriesResult)
	err := c.cc.Invoke(ctx, StoreCategoryQuery_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeCategoryQueryClient) ById(ctx context.Context, in *StoreCategoryParam, opts ...grpc.CallOption) (*StoreCategoryResult, error) {
	out := new(StoreCategoryResult)
	err := c.cc.Invoke(ctx, StoreCategoryQuery_ById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreCategoryQueryServer is the server API for StoreCategoryQuery service.
// All implementations must embed UnimplementedStoreCategoryQueryServer
// for forward compatibility
type StoreCategoryQueryServer interface {
	// すべてのカテゴリを取得して返す
	List(context.Context, *emptypb.Empty) (*StoreCategoriesResult, error)
	// 指定されたIDのカテゴリを取得して返す
	ById(context.Context, *StoreCategoryParam) (*StoreCategoryResult, error)
	mustEmbedUnimplementedStoreCategoryQueryServer()
}

// UnimplementedStoreCategoryQueryServer must be embedded to have forward compatible implementations.
type UnimplementedStoreCategoryQueryServer struct {
}

func (UnimplementedStoreCategoryQueryServer) List(context.Context, *emptypb.Empty) (*StoreCategoriesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStoreCategoryQueryServer) ById(context.Context, *StoreCategoryParam) (*StoreCategoryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ById not implemented")
}
func (UnimplementedStoreCategoryQueryServer) mustEmbedUnimplementedStoreCategoryQueryServer() {}

// UnsafeStoreCategoryQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreCategoryQueryServer will
// result in compilation errors.
type UnsafeStoreCategoryQueryServer interface {
	mustEmbedUnimplementedStoreCategoryQueryServer()
}

func RegisterStoreCategoryQueryServer(s grpc.ServiceRegistrar, srv StoreCategoryQueryServer) {
	s.RegisterService(&StoreCategoryQuery_ServiceDesc, srv)
}

func _StoreCategoryQuery_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreCategoryQueryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreCategoryQuery_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreCategoryQueryServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreCategoryQuery_ById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreCategoryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreCategoryQueryServer).ById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreCategoryQuery_ById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreCategoryQueryServer).ById(ctx, req.(*StoreCategoryParam))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreCategoryQuery_ServiceDesc is the grpc.ServiceDesc for StoreCategoryQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreCategoryQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_protoc.StoreCategoryQuery",
	HandlerType: (*StoreCategoryQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StoreCategoryQuery_List_Handler,
		},
		{
			MethodName: "ById",
			Handler:    _StoreCategoryQuery_ById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_proto/query.proto",
}

const (
	StoreQuery_ListStream_FullMethodName = "/go_protoc.StoreQuery/ListStream"
	StoreQuery_List_FullMethodName       = "/go_protoc.StoreQuery/List"
	StoreQuery_ById_FullMethodName       = "/go_protoc.StoreQuery/ById"
	StoreQuery_ByKeyword_FullMethodName  = "/go_protoc.StoreQuery/ByKeyword"
)

// StoreQueryClient is the client API for StoreQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreQueryClient interface {
	// すべての飲食店を取得して返す(Server streaming RPC)
	ListStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (StoreQuery_ListStreamClient, error)
	// すべての飲食店を取得して返す
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StoresResult, error)
	// 指定されたIDの飲食店を取得して返す
	ById(ctx context.Context, in *StoreParam, opts ...grpc.CallOption) (*StoreResult, error)
	// 指定されたキーワードの飲食店を取得して返す
	ByKeyword(ctx context.Context, in *StoreParam, opts ...grpc.CallOption) (*StoresResult, error)
}

type storeQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreQueryClient(cc grpc.ClientConnInterface) StoreQueryClient {
	return &storeQueryClient{cc}
}

func (c *storeQueryClient) ListStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (StoreQuery_ListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StoreQuery_ServiceDesc.Streams[0], StoreQuery_ListStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storeQueryListStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StoreQuery_ListStreamClient interface {
	Recv() (*Store, error)
	grpc.ClientStream
}

type storeQueryListStreamClient struct {
	grpc.ClientStream
}

func (x *storeQueryListStreamClient) Recv() (*Store, error) {
	m := new(Store)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeQueryClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StoresResult, error) {
	out := new(StoresResult)
	err := c.cc.Invoke(ctx, StoreQuery_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeQueryClient) ById(ctx context.Context, in *StoreParam, opts ...grpc.CallOption) (*StoreResult, error) {
	out := new(StoreResult)
	err := c.cc.Invoke(ctx, StoreQuery_ById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeQueryClient) ByKeyword(ctx context.Context, in *StoreParam, opts ...grpc.CallOption) (*StoresResult, error) {
	out := new(StoresResult)
	err := c.cc.Invoke(ctx, StoreQuery_ByKeyword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreQueryServer is the server API for StoreQuery service.
// All implementations must embed UnimplementedStoreQueryServer
// for forward compatibility
type StoreQueryServer interface {
	// すべての飲食店を取得して返す(Server streaming RPC)
	ListStream(*emptypb.Empty, StoreQuery_ListStreamServer) error
	// すべての飲食店を取得して返す
	List(context.Context, *emptypb.Empty) (*StoresResult, error)
	// 指定されたIDの飲食店を取得して返す
	ById(context.Context, *StoreParam) (*StoreResult, error)
	// 指定されたキーワードの飲食店を取得して返す
	ByKeyword(context.Context, *StoreParam) (*StoresResult, error)
	mustEmbedUnimplementedStoreQueryServer()
}

// UnimplementedStoreQueryServer must be embedded to have forward compatible implementations.
type UnimplementedStoreQueryServer struct {
}

func (UnimplementedStoreQueryServer) ListStream(*emptypb.Empty, StoreQuery_ListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListStream not implemented")
}
func (UnimplementedStoreQueryServer) List(context.Context, *emptypb.Empty) (*StoresResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStoreQueryServer) ById(context.Context, *StoreParam) (*StoreResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ById not implemented")
}
func (UnimplementedStoreQueryServer) ByKeyword(context.Context, *StoreParam) (*StoresResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByKeyword not implemented")
}
func (UnimplementedStoreQueryServer) mustEmbedUnimplementedStoreQueryServer() {}

// UnsafeStoreQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreQueryServer will
// result in compilation errors.
type UnsafeStoreQueryServer interface {
	mustEmbedUnimplementedStoreQueryServer()
}

func RegisterStoreQueryServer(s grpc.ServiceRegistrar, srv StoreQueryServer) {
	s.RegisterService(&StoreQuery_ServiceDesc, srv)
}

func _StoreQuery_ListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreQueryServer).ListStream(m, &storeQueryListStreamServer{stream})
}

type StoreQuery_ListStreamServer interface {
	Send(*Store) error
	grpc.ServerStream
}

type storeQueryListStreamServer struct {
	grpc.ServerStream
}

func (x *storeQueryListStreamServer) Send(m *Store) error {
	return x.ServerStream.SendMsg(m)
}

func _StoreQuery_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreQueryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreQuery_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreQueryServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreQuery_ById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreQueryServer).ById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreQuery_ById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreQueryServer).ById(ctx, req.(*StoreParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreQuery_ByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreQueryServer).ByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreQuery_ByKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreQueryServer).ByKeyword(ctx, req.(*StoreParam))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreQuery_ServiceDesc is the grpc.ServiceDesc for StoreQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_protoc.StoreQuery",
	HandlerType: (*StoreQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StoreQuery_List_Handler,
		},
		{
			MethodName: "ById",
			Handler:    _StoreQuery_ById_Handler,
		},
		{
			MethodName: "ByKeyword",
			Handler:    _StoreQuery_ByKeyword_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListStream",
			Handler:       _StoreQuery_ListStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "go_proto/query.proto",
}
